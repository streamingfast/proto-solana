syntax = "proto3";

package dfuse.solana.codec.v1;
option go_package = "github.com/dfuse-io/dfuse-solana/pb/dfuse/solana/codec/v1;pbcodec";

message Slot {
  string id = 1; // hash of the last Entry closing the slot
  uint64 number = 2; // slot number, not block number
  string previous_id = 3; // corresponds to the previous SLOT hash
  uint32 version = 4;
  Block block = 5;

  repeated Transaction transactions = 7;
  uint32 transaction_count = 8;

  bool has_split_account_changes = 9;
  string account_changes_file_ref = 10;
}

message Block {
  string id = 1;  // corresponds to the Slot id (or hash)
  uint64 number = 2; // corresponds to the Slot number for this block
  uint64 height = 3;
  string previous_id = 4; // corresponds to the previous_blockhash, might skip some slots, so beware
  uint64 previous_block_slot = 5;
  uint64 genesis_unix_timestamp = 6;
  uint64 clock_unix_timestamp = 7;
  uint64 root_num = 8;
}

message Batch {
  repeated Transaction transactions = 1;
}

// Bundled in separate files, referenced by `account_changes_file_ref`
message AccountChangesBundle {
  // Maps to the index of the `repeated` field for Block::transactions
  repeated AccountChangesPerTrxIndex transactions = 1;
}

message AccountChangesPerTrxIndex {
  // Maps to the index within the `repeated` field of the proto for
  // Transaction::instructions
  repeated AccountChangesPerInstruction instructions = 1;
}

message AccountChangesPerInstruction {
  // Data to be put in Instruction::account_changes
  repeated AccountChange changes = 1;
}

message Transaction {
  // The transaction ID corresponds to the _first_
  // signature. Additional signatures are in `additional_signatures`.
  string id = 1;

  // slot_num could be zero for non-executed transactions
  uint64 slot_num = 2;
  // slot_hash could be empty for non-executed transactions
  string slot_hash = 3;

  // Index from within a single Slot, deterministically ordered to the
  // best of our ability using the transaction ID as a sort key for
  // the batch of transactions executed in parallel.
  uint64 index = 4;

  repeated string additional_signatures = 5;

  MessageHeader header = 6;
  // From the original Message object
  repeated string account_keys = 7;
  // From the original Message object
  string recent_blockhash = 8;

  // What follows Once executed these can be set:
  repeated string log_messages = 12;
  // Instructions, containing both top-level and nested transactions
  repeated Instruction instructions = 13;
}

message MessageHeader  {
  uint32 num_required_signatures = 1;
  uint32 num_readonly_signed_accounts = 2;
  uint32 num_readonly_unsigned_accounts = 3;
}


/**
- instr1 (id=1, parent=0)
- instr2 (id=2, parent=0) (pubkey1 is writable)
  - instr3 (id=3, parent=2) (pubkey1 is writable)
     - instr4 (id=4, parent=3) (pubkey1 is writable)
        - instr5 (id=5, parent=4) (pubkey1 is writable, mutates pubkey1)
       collect delta of pubkey1
     collect delta of pubkey1 ONLY IF CHANGED AGAIN, from last time we took a snapshot of it.
  collect delta of pubkey1
- instr6 (id=6, parent=0)
 */

message Instruction {
  string program_id = 3;
  repeated string account_keys = 4;
  bytes data = 5;

  // What follows is execution trace data, could be empty for un-executed transactions.

  uint32 ordinal = 6;
  uint32 parent_ordinal = 7;
  uint32 depth = 8;

  repeated BalanceChange balance_changes = 9;
  repeated AccountChange account_changes = 10;
}

message BalanceChange {
  string pubkey = 1;
  uint64 prev_lamports = 2;
  uint64 new_lamports = 3;
}

message AccountChange {
  string pubkey = 1;
  bytes prev_data = 2;
  bytes new_data = 3;
  uint64 new_data_length = 4;
}
